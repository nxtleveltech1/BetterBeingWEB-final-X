name: Production Monitoring

on:
  schedule:
    # Run health checks every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of monitoring check'
        required: false
        default: 'health'
        type: choice
        options:
          - health
          - performance
          - security
          - full

env:
  PRODUCTION_URL: "https://better-being-web.vercel.app"
  STAGING_URL: "https://better-being-staging.vercel.app"

jobs:
  # Health Monitoring
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type != 'performance' && github.event.inputs.check_type != 'security'
    steps:
      - name: Production health check
        id: prod-health
        run: |
          echo "ü©∫ Checking production health..."
          
          # Basic connectivity
          if curl -sf "${{ env.PRODUCTION_URL }}" > /dev/null; then
            echo "‚úÖ Production site is responding"
            echo "status=healthy" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Production site is not responding"
            echo "status=unhealthy" >> $GITHUB_OUTPUT
          fi
          
          # Check response time
          response_time=$(curl -w "%{time_total}" -s -o /dev/null "${{ env.PRODUCTION_URL }}")
          echo "Response time: ${response_time}s"
          echo "response_time=$response_time" >> $GITHUB_OUTPUT
          
          # Check HTTP status
          status_code=$(curl -w "%{http_code}" -s -o /dev/null "${{ env.PRODUCTION_URL }}")
          echo "HTTP status: $status_code"
          echo "http_status=$status_code" >> $GITHUB_OUTPUT

      - name: API health check
        id: api-health
        run: |
          echo "üîå Checking API health..."
          
          # Check API endpoints
          if curl -sf "${{ env.PRODUCTION_URL }}/api/health" > /dev/null; then
            echo "‚úÖ API health endpoint responding"
            echo "api_status=healthy" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è API health endpoint not available"
            echo "api_status=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Create health status issue
        if: steps.prod-health.outputs.status == 'unhealthy'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Production Health Alert - ${new Date().toISOString()}`;
            const body = `
            ## Production Health Alert
            
            **Status:** ‚ùå UNHEALTHY
            **Time:** ${new Date().toISOString()}
            **URL:** ${{ env.PRODUCTION_URL }}
            **HTTP Status:** ${{ steps.prod-health.outputs.http_status }}
            **Response Time:** ${{ steps.prod-health.outputs.response_time }}s
            
            ### Actions Required:
            - [ ] Investigate production deployment
            - [ ] Check Vercel deployment status
            - [ ] Verify DNS resolution
            - [ ] Check for recent deployments
            
            **Auto-generated by:** Production Monitoring Workflow
            `;
            
            // Check if there's already an open health issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'production,health-alert'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['production', 'health-alert', 'critical']
              });
            }

  # Performance Monitoring
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'performance' || github.event.inputs.check_type == 'full' || github.event_name == 'schedule'
    steps:
      - name: Performance metrics
        id: perf-check
        run: |
          echo "‚ö° Checking performance metrics..."
          
          # Measure multiple performance indicators
          for i in {1..3}; do
            response_time=$(curl -w "%{time_total}" -s -o /dev/null "${{ env.PRODUCTION_URL }}")
            size_download=$(curl -w "%{size_download}" -s -o /dev/null "${{ env.PRODUCTION_URL }}")
            
            echo "Attempt $i: ${response_time}s, ${size_download} bytes"
            
            # Store values for averaging
            if [ $i -eq 1 ]; then
              total_time=$response_time
              total_size=$size_download
            else
              total_time=$(echo "$total_time + $response_time" | bc)
              total_size=$(echo "$total_size + $size_download" | bc)
            fi
          done
          
          # Calculate averages
          avg_time=$(echo "scale=3; $total_time / 3" | bc)
          avg_size=$(echo "$total_size / 3" | bc)
          
          echo "Average response time: ${avg_time}s"
          echo "Average page size: ${avg_size} bytes"
          echo "avg_response_time=$avg_time" >> $GITHUB_OUTPUT
          echo "avg_page_size=$avg_size" >> $GITHUB_OUTPUT
          
          # Check performance thresholds
          if (( $(echo "$avg_time > 3.0" | bc -l) )); then
            echo "‚ö†Ô∏è Performance degradation detected"
            echo "performance_status=degraded" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Performance within acceptable limits"
            echo "performance_status=good" >> $GITHUB_OUTPUT
          fi

      - name: Performance alert
        if: steps.perf-check.outputs.performance_status == 'degraded'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `‚ö° Performance Alert - Slow Response Times`;
            const body = `
            ## Performance Degradation Alert
            
            **Status:** ‚ö†Ô∏è DEGRADED
            **Time:** ${new Date().toISOString()}
            **Average Response Time:** ${{ steps.perf-check.outputs.avg_response_time }}s
            **Average Page Size:** ${{ steps.perf-check.outputs.avg_page_size }} bytes
            **Threshold:** 3.0s
            
            ### Investigation Steps:
            - [ ] Check Vercel analytics
            - [ ] Review recent deployments
            - [ ] Analyze bundle size changes
            - [ ] Check third-party service status
            - [ ] Monitor database performance
            
            **Auto-generated by:** Performance Monitoring Workflow
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['production', 'performance', 'monitoring']
            });

  # Uptime Summary
  uptime-summary:
    name: Uptime Summary
    runs-on: ubuntu-latest
    needs: [health-check]
    if: always()
    steps:
      - name: Generate uptime report
        run: |
          echo "üìä Uptime Summary"
          echo "=================="
          echo ""
          echo "**Time:** $(date -u)"
          echo "**Production URL:** ${{ env.PRODUCTION_URL }}"
          echo ""
          
          if [ "${{ needs.health-check.outputs.status }}" = "healthy" ] || [ "${{ needs.health-check.result }}" = "success" ]; then
            echo "**Status:** ‚úÖ HEALTHY"
          else
            echo "**Status:** ‚ùå UNHEALTHY"
          fi
          
          echo ""
          echo "üìà Monitoring continues every 15 minutes"

  # Dependency Monitoring
  dependency-monitor:
    name: Dependency Monitor
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'security' || github.event.inputs.check_type == 'full'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Check for dependency updates
        run: |
          echo "üì¶ Checking for critical dependency updates..."
          
          # Install npm-check-updates
          npx npm-check-updates --doctor -u --target minor > dependency-updates.log 2>&1 || true
          
          if [ -s dependency-updates.log ]; then
            echo "üìã Dependency updates available"
            cat dependency-updates.log
          else
            echo "‚úÖ All dependencies are up to date"
          fi

      - name: Security audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level moderate > security-audit.log 2>&1 || true
          
          if grep -q "vulnerabilities" security-audit.log; then
            echo "‚ö†Ô∏è Security vulnerabilities found"
            cat security-audit.log
          else
            echo "‚úÖ No security vulnerabilities found"
          fi

  # External Service Check
  external-services:
    name: External Services Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'full'
    steps:
      - name: Check external dependencies
        run: |
          echo "üåê Checking external service dependencies..."
          
          # Check CDN services
          services=(
            "https://fonts.googleapis.com"
            "https://cdnjs.cloudflare.com"
            "https://api.stripe.com"
          )
          
          for service in "${services[@]}"; do
            if curl -sf "$service" > /dev/null; then
              echo "‚úÖ $service is responding"
            else
              echo "‚ùå $service is not responding"
            fi
          done

  # Monitoring Summary
  monitoring-summary:
    name: Monitoring Summary
    runs-on: ubuntu-latest
    needs: [health-check, performance-check, dependency-monitor, external-services]
    if: always()
    steps:
      - name: Generate monitoring summary
        run: |
          echo "üîç Monitoring Summary Report"
          echo "==========================="
          echo ""
          echo "**Timestamp:** $(date -u)"
          echo "**Trigger:** ${{ github.event_name }}"
          echo ""
          
          # Health Check Results
          if [ "${{ needs.health-check.result }}" = "success" ]; then
            echo "‚úÖ **Health Check:** PASSED"
          elif [ "${{ needs.health-check.result }}" = "failure" ]; then
            echo "‚ùå **Health Check:** FAILED"
          else
            echo "‚è≠Ô∏è **Health Check:** SKIPPED"
          fi
          
          # Performance Check Results
          if [ "${{ needs.performance-check.result }}" = "success" ]; then
            echo "‚úÖ **Performance Check:** PASSED"
          elif [ "${{ needs.performance-check.result }}" = "failure" ]; then
            echo "‚ùå **Performance Check:** FAILED"
          else
            echo "‚è≠Ô∏è **Performance Check:** SKIPPED"
          fi
          
          # Dependency Monitor Results
          if [ "${{ needs.dependency-monitor.result }}" = "success" ]; then
            echo "‚úÖ **Dependency Monitor:** PASSED"
          elif [ "${{ needs.dependency-monitor.result }}" = "failure" ]; then
            echo "‚ùå **Dependency Monitor:** FAILED"
          else
            echo "‚è≠Ô∏è **Dependency Monitor:** SKIPPED"
          fi
          
          # External Services Results
          if [ "${{ needs.external-services.result }}" = "success" ]; then
            echo "‚úÖ **External Services:** PASSED"
          elif [ "${{ needs.external-services.result }}" = "failure" ]; then
            echo "‚ùå **External Services:** FAILED"
          else
            echo "‚è≠Ô∏è **External Services:** SKIPPED"
          fi
          
          echo ""
          echo "üìä Full monitoring reports available in workflow details"