name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend

jobs:
  # Frontend Testing and Build
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install frontend dependencies
      run: npm ci
      
    - name: Run frontend linting
      run: npm run lint
      
    - name: Run frontend tests
      run: npm run test:run
      
    - name: Generate test coverage
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

    - name: Build frontend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: dist/
        retention-days: 7

  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: betterbeingweb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./server
      run: npm ci
      
    - name: Run backend tests
      working-directory: ./server
      run: npm run test:run
      env:
        NODE_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/betterbeingweb_test
        JWT_SECRET: test-jwt-secret
        
    - name: Generate backend coverage
      working-directory: ./server
      run: npm run test:coverage
      
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./server/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Security and Quality Checks
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Frontend security audit
      run: |
        npm audit --audit-level moderate
        
    - name: Backend security audit
      working-directory: ./server
      run: |
        npm audit --audit-level moderate

  # Build and Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-audit]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: ${{ vars.STAGING_URL }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for staging
      run: npm run build:dev
      env:
        VITE_API_URL: ${{ vars.STAGING_API_URL }}
        VITE_FEATURE_ADVANCED_SEARCH: 'true'
        
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /var/www/betterbeingweb-staging
          git pull origin develop
          npm ci
          npm run build:dev
          pm2 restart betterbeingweb-staging

  # Build and Deploy to Production  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      run: npm run build
      env:
        VITE_API_URL: ${{ vars.PRODUCTION_API_URL }}
        VITE_FEATURE_ADVANCED_SEARCH: 'true'
        
    - name: Run production tests
      run: npm run test:run
      
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /var/www/betterbeingweb-production
          git pull origin main
          npm ci
          npm run build
          pm2 restart betterbeingweb-production

  # Database Migration (Production Only)
  migrate-database:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Run database migrations
      run: |
        cd server
        npm ci
        node src/config/migrate.js
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        NODE_ENV: production

  # Performance and Health Checks
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Wait for deployment
      run: sleep 60
      
    - name: Health check - Frontend
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ vars.PRODUCTION_URL }})
        if [ $response -ne 200 ]; then
          echo "Frontend health check failed with status $response"
          exit 1
        fi
        echo "Frontend health check passed"
        
    - name: Health check - Backend API
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ vars.PRODUCTION_API_URL }}/health)
        if [ $response -ne 200 ]; then
          echo "Backend health check failed with status $response"
          exit 1
        fi
        echo "Backend health check passed"

  # Lighthouse Performance Audit
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Lighthouse CI Action
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ vars.PRODUCTION_URL }}
          ${{ vars.PRODUCTION_URL }}/products
          ${{ vars.PRODUCTION_URL }}/login
        uploadArtifacts: true
        temporaryPublicStorage: true
